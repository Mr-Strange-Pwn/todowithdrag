{"version":3,"sources":["components/context/context.js","components/todo/todo.jsx","App.js","serviceWorker.js","index.js"],"names":["context","React","createContext","Provider","TodoContainer","props","useState","ToDo","setToDo","inprogress","setinprogress","done","setdone","todo","settodo","value","addTodo","item","ntodo","push","td","filter","status","removeitem","newtodo","it","ip","dn","setStatus","index","findIndex","list","nStatus","nTodo","splice","children","input","setinput","useContext","onDragOver","e","preventDefault","onDragStart","id","console","log","dataTransfer","setData","onDrop","name","getData","Container","className","Row","Col","type","placeholder","style","width","onChange","target","onKeyDown","key","inputHandler","map","draggable","onDoubleClick","App","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","message"],"mappings":"gOAEaA,EAAUC,IAAMC,gBACvBC,EAAWH,EAAQG,SAuDVC,EArDO,SAACC,GAAW,IAAD,EACPC,mBAAS,IADF,mBACxBC,EADwB,KAClBC,EADkB,OAEKF,mBAAS,IAFd,mBAExBG,EAFwB,KAEZC,EAFY,OAGPJ,mBAAS,IAHF,mBAGxBK,EAHwB,KAGlBC,EAHkB,OAIPN,mBAAS,IAJF,mBAIxBO,EAJwB,KAIlBC,EAJkB,KAqC/B,OACE,kBAACX,EAAD,CACEY,MAAO,CACLR,KAAMA,EACNM,KAAMA,EACNJ,WAAYA,EACZE,KAAMA,EACNK,QAtCU,SAACC,GACf,IAAIC,EAAQX,EACZW,EAAMC,KAAKF,GACXT,EAAQU,GACR,IAAIE,EAAKb,EAAKc,QAAO,SAACJ,GAAD,MAA0B,SAAhBA,EAAKK,UACpCR,EAAQM,IAkCJG,WAhCa,SAACN,GAClB,IAAIO,EAAUjB,EAAKc,QAAO,SAACI,GAAD,OAAQA,EAAGR,OAASA,KAC9CT,EAAQgB,GACR,IAAIE,EAAKnB,EAAKc,QAAO,SAACJ,GAAD,MAA0B,eAAhBA,EAAKK,UAChCK,EAAKpB,EAAKc,QAAO,SAACJ,GAAD,MAA0B,SAAhBA,EAAKK,UAChCF,EAAKb,EAAKc,QAAO,SAACJ,GAAD,MAA0B,SAAhBA,EAAKK,UACpCR,EAAQM,GACRV,EAAcgB,GACdd,EAAQe,IAyBJC,UAtBY,SAACX,EAAMK,GACvB,IAAIO,EAAQtB,EAAKuB,WAAU,SAACC,GAAD,OAAUA,EAAKd,OAASA,KAC/Ce,EAAU,CAAEf,KAAMA,EAAMK,OAAQA,GAChCW,EAAQ1B,EACZ0B,EAAMC,OAAOL,EAAO,EAAGG,GACvBxB,EAAQyB,GACR,IAAIP,EAAKnB,EAAKc,QAAO,SAACJ,GAAD,MAA0B,eAAhBA,EAAKK,UAChCK,EAAKpB,EAAKc,QAAO,SAACJ,GAAD,MAA0B,SAAhBA,EAAKK,UAChCF,EAAKb,EAAKc,QAAO,SAACJ,GAAD,MAA0B,SAAhBA,EAAKK,UACpCR,EAAQM,GACRV,EAAcgB,GACdd,EAAQe,MAaLtB,EAAM8B,WCiDE5B,EAlGF,WAAO,IAAD,EACSD,mBAAS,IADlB,mBACV8B,EADU,KACHC,EADG,KAEXtB,EAAQuB,qBAAWtC,GAEnBuC,EAAa,SAACC,GAClBA,EAAEC,kBAGEC,EAAc,SAACF,EAAGG,GACtBC,QAAQC,IAAI,aAAcF,GAC1BH,EAAEM,aAAaC,QAAQ,KAAMJ,IAGzBK,EAAS,SAACR,EAAGS,GACjB,IAAIN,EAAKH,EAAEM,aAAaI,QAAQ,MAEhCnC,EAAMa,UAAUe,EAAIM,IAUtB,OACE,kBAACE,EAAA,EAAD,CAAWC,UAAU,SACnB,kBAACC,EAAA,EAAD,KACE,kBAACC,EAAA,EAAD,CACEf,WAAY,SAACC,GAAD,OAAOD,EAAWC,IAC9BQ,OAAQ,SAACR,GAAD,OAAOQ,EAAOR,EAAG,SACzBY,UAAU,iBACV,qCACA,6BACA,2BACEG,KAAK,OACLxC,MAAOqB,EACPoB,YAAY,cACZC,MAAO,CAAEC,MAAO,QAChBC,SAAU,SAACnB,GAAD,OAAOH,EAASG,EAAEoB,OAAO7C,QACnC8C,UAAW,SAACrB,GAAD,OAvBA,SAACA,GACpB,GAAc,UAAVA,EAAEsB,IAAiB,CACrB,IAAIjD,EAAO,CAAEI,KAAMmB,EAAOd,OAAQ,QAClCP,EAAMC,QAAQH,GACdwB,EAAS,KAmBe0B,CAAavB,MAEjC,6BACA,kBAACW,EAAA,EAAD,KACGpC,EAAMF,KAAKmD,KAAI,SAAC/C,GAAD,OACd,yBACEgD,WAAS,EACTb,UAAU,iBACVV,YAAa,SAACF,GAAD,OAAOE,EAAYF,EAAGvB,EAAKA,QACvC,IACD,4BAAKA,EAAKA,YAKlB,kBAACqC,EAAA,EAAD,CACEF,UAAU,cACVb,WAAY,SAACC,GAAD,OAAOD,EAAWC,IAC9BQ,OAAQ,SAACR,GAAD,OAAOQ,EAAOR,EAAG,gBACzB,2CACA,6BACA,kBAACW,EAAA,EAAD,KACGpC,EAAMN,WAAWuD,KAAI,SAAC/C,GAAD,OACpB,yBACEmC,UAAU,iBACVa,WAAS,EACTvB,YAAa,SAACF,GAAD,OAAOE,EAAYF,EAAGvB,EAAKA,QACvC,IACD,wBAAImC,UAAU,WAAWnC,EAAKA,YAKtC,kBAACqC,EAAA,EAAD,CACEF,UAAU,gBACVb,WAAY,SAACC,GAAD,OAAOD,EAAWC,IAC9BQ,OAAQ,SAACR,GAAD,OAAOQ,EAAOR,EAAG,UACzB,oCACA,6BACA,kBAACW,EAAA,EAAD,KACGpC,EAAMJ,KAAKqD,KAAI,SAAC/C,GAAD,OACd,yBACEmC,UAAU,iBACVa,WAAS,EACTC,cAAe,kBAAMnD,EAAMQ,WAAWN,EAAKA,OAC3CyB,YAAa,SAACF,GAAD,OAAOE,EAAYF,EAAGvB,EAAKA,QACvC,IACD,4BAAKA,EAAKA,MAAW,aC/EtBkD,MARf,WACE,OACE,kBAAC,EAAD,KACE,kBAAC,EAAD,QCIcC,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OACP,kBAAC,IAAMC,WAAP,KACE,kBAAC,EAAD,OAEFC,SAASC,eAAe,SDyHpB,kBAAmBC,WACrBA,UAAUC,cAAcC,MACrBC,MAAK,SAAAC,GACJA,EAAaC,gBAEdC,OAAM,SAAAC,GACLzC,QAAQyC,MAAMA,EAAMC,a","file":"static/js/main.c57bc2d6.chunk.js","sourcesContent":["import React, { useState } from \"react\";\r\n\r\nexport const context = React.createContext();\r\nconst Provider = context.Provider;\r\n\r\nconst TodoContainer = (props) => {\r\n  const [ToDo, setToDo] = useState([]);\r\n  const [inprogress, setinprogress] = useState([]);\r\n  const [done, setdone] = useState([]);\r\n  const [todo, settodo] = useState([]);\r\n\r\n  const addTodo = (item) => {\r\n    let ntodo = ToDo;\r\n    ntodo.push(item);\r\n    setToDo(ntodo);\r\n    let td = ToDo.filter((item) => item.status === \"todo\");\r\n    settodo(td);\r\n  };\r\n  const removeitem = (item) => {\r\n    let newtodo = ToDo.filter((it) => it.item !== item);\r\n    setToDo(newtodo);\r\n    let ip = ToDo.filter((item) => item.status === \"inprogress\");\r\n    let dn = ToDo.filter((item) => item.status === \"done\");\r\n    let td = ToDo.filter((item) => item.status === \"todo\");\r\n    settodo(td);\r\n    setinprogress(ip);\r\n    setdone(dn);\r\n  };\r\n\r\n  const setStatus = (item, status) => {\r\n    let index = ToDo.findIndex((list) => list.item === item);\r\n    let nStatus = { item: item, status: status };\r\n    let nTodo = ToDo;\r\n    nTodo.splice(index, 1, nStatus);\r\n    setToDo(nTodo);\r\n    let ip = ToDo.filter((item) => item.status === \"inprogress\");\r\n    let dn = ToDo.filter((item) => item.status === \"done\");\r\n    let td = ToDo.filter((item) => item.status === \"todo\");\r\n    settodo(td);\r\n    setinprogress(ip);\r\n    setdone(dn);\r\n  };\r\n  return (\r\n    <Provider\r\n      value={{\r\n        ToDo: ToDo,\r\n        todo: todo,\r\n        inprogress: inprogress,\r\n        done: done,\r\n        addTodo: addTodo,\r\n        removeitem: removeitem,\r\n        setStatus: setStatus,\r\n      }}>\r\n      {props.children}\r\n    </Provider>\r\n  );\r\n};\r\n\r\nexport default TodoContainer;\r\n","import React, { useContext, useState } from \"react\";\r\nimport { Container, Row, Col } from \"react-bootstrap\";\r\nimport { context } from \"../context/context\";\r\n\r\nconst ToDo = () => {\r\n  const [input, setinput] = useState(\"\");\r\n  const value = useContext(context);\r\n\r\n  const onDragOver = (e) => {\r\n    e.preventDefault();\r\n  };\r\n\r\n  const onDragStart = (e, id) => {\r\n    console.log(\"dragstart:\", id);\r\n    e.dataTransfer.setData(\"id\", id);\r\n  };\r\n\r\n  const onDrop = (e, name) => {\r\n    let id = e.dataTransfer.getData(\"id\");\r\n\r\n    value.setStatus(id, name);\r\n  };\r\n  const inputHandler = (e) => {\r\n    if (e.key === \"Enter\") {\r\n      let todo = { item: input, status: \"todo\" };\r\n      value.addTodo(todo);\r\n      setinput(\"\");\r\n    }\r\n  };\r\n\r\n  return (\r\n    <Container className=\"mt-5 \">\r\n      <Row>\r\n        <Col\r\n          onDragOver={(e) => onDragOver(e)}\r\n          onDrop={(e) => onDrop(e, \"todo\")}\r\n          className=\"todocontainer\">\r\n          <h3>To Do</h3>\r\n          <hr />\r\n          <input\r\n            type=\"text\"\r\n            value={input}\r\n            placeholder=\"add a item \"\r\n            style={{ width: \"100%\" }}\r\n            onChange={(e) => setinput(e.target.value)}\r\n            onKeyDown={(e) => inputHandler(e)}\r\n          />\r\n          <hr />\r\n          <Container>\r\n            {value.todo.map((item) => (\r\n              <div\r\n                draggable\r\n                className=\"card mt-1 md-1\"\r\n                onDragStart={(e) => onDragStart(e, item.item)}>\r\n                {\" \"}\r\n                <h5>{item.item}</h5>\r\n              </div>\r\n            ))}\r\n          </Container>\r\n        </Col>\r\n        <Col\r\n          className=\"ipcontainer\"\r\n          onDragOver={(e) => onDragOver(e)}\r\n          onDrop={(e) => onDrop(e, \"inprogress\")}>\r\n          <h3>In Progress</h3>\r\n          <hr />\r\n          <Container>\r\n            {value.inprogress.map((item) => (\r\n              <div\r\n                className=\"card mt-1 md-1\"\r\n                draggable\r\n                onDragStart={(e) => onDragStart(e, item.item)}>\r\n                {\" \"}\r\n                <h5 className=\"mt-0.5 \">{item.item}</h5>\r\n              </div>\r\n            ))}\r\n          </Container>\r\n        </Col>\r\n        <Col\r\n          className=\"donecontainer\"\r\n          onDragOver={(e) => onDragOver(e)}\r\n          onDrop={(e) => onDrop(e, \"done\")}>\r\n          <h2>Done</h2>\r\n          <hr />\r\n          <Container>\r\n            {value.done.map((item) => (\r\n              <div\r\n                className=\"card mt-1 md-1\"\r\n                draggable\r\n                onDoubleClick={() => value.removeitem(item.item)}\r\n                onDragStart={(e) => onDragStart(e, item.item)}>\r\n                {\" \"}\r\n                <h5>{item.item}</h5>{\" \"}\r\n              </div>\r\n            ))}\r\n          </Container>\r\n        </Col>\r\n      </Row>\r\n    </Container>\r\n  );\r\n};\r\n\r\nexport default ToDo;\r\n","import React from \"react\";\nimport \"bootstrap/dist/css/bootstrap.min.css\";\nimport ToDo from \"./components/todo/todo\";\nimport TodoContainer from \"./components/context/context\";\n\nfunction App() {\n  return (\n    <TodoContainer>\n      <ToDo />\n    </TodoContainer>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}